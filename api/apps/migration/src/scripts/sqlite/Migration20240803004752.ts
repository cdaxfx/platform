import { Migration } from '@mikro-orm/migrations';

export class Migration20240803004752 extends Migration {

  async up(): Promise<void> {
    this.addSql('create table `bank_metadata` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `bank_name` text not null, `branch` text not null, `bank_country` text not null, `account_holder_name` text not null, `sort_code` text not null, `account_number` text not null, `iban` text null, `bic_swift` text null, `currency` text null, primary key (`uuid`));');

    this.addSql('create table `business_metadata` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `company_name` text null, `trading_name` text null, `website_url` text null, `other_contact_info` text null, `nature_of_business` text null, `company_registration_number` text null, `is_vat_registered` integer null, `vat_number` text null, `is_publicly_trading` integer null, `stock_market_location` text null, `stock_market` text null, `is_regulated` integer null, `regulator_name` text null, `legal_entity` text null, `email` text null, `other_trading_names` text null, `company_type` text check (`company_type` in (\'LIMITED_LIABILITY\', \'SOLE_TRADER\', \'PARTNERSHIP\', \'CHARITY\', \'JOINT_STOCK_COMPANY\', \'PUBLIC_LIMITED_COMPANY\')) not null, `country_of_registration` text null, `date_of_registration` text null, `telephone_number` text null, `date_of_incorporation` text null, `statutory_provision` text null, `registered_office1` text null, `registered_office1_address2` text null, `registered_office1_postcode` text null, `registered_office1_city` text null, `registered_office1_state` text null, `registered_office2` text null, `registered_office3` text null, `principal_place` text null, `mailing_address` text null, `address1` text null, `address2` text null, `previous_office1` text null, `previous_office2` text null, `previous_office3` text null, `expected_activity` text null, `expected_volume` text null, primary key (`uuid`));');

    this.addSql('create table `individual_metadata` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `title` text null, `firstname` text null, `lastname` text null, `former_name` text null, `other_name` text null, `date_of_birth` datetime null default current_timestamp, `place_of_birth` text null, `address_line1` text null, `address_line2` text null, `city` text null, `postcode` text null, `state` text null, `country` text null, `previous_address_line1` text null, `previous_address_line2` text null, `previous_city` text null, `previous_postcode` text null, `previous_country` text null, `previous_state` text null, `nationality` text null, `gender` text null default \'other\', `identification_number` text null, `identification_type` text null default \'\', `occupation` text null, `employer_name` text null, `employer_address1` text null, `employer_address2` text null, `employer_address3` text null, `public_position` text null, `high_profile_position` text null, primary key (`uuid`));');

    this.addSql('create table `request_access` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `email` text not null, `firstname` text not null, `lastname` text not null, `mobile_number` text not null, primary key (`uuid`));');

    this.addSql('create table `user` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `username` text not null, `password` text null, `ip` text null, `firstname` text not null, `lastname` text not null, `profile_image` text null, `has_accepted_terms` integer not null default false, `archived_at` text null, `invited_by` text null, `verification_code` text null, `verified_at` datetime null, `contact_uuid` text null, `two_fasecret` text null, `two_fa` integer null, `is_mobile2faenabled` integer null default true, `password_updated_at` datetime null default current_timestamp, `current_client_uuid` text null, constraint `user_contact_uuid_foreign` foreign key(`contact_uuid`) references `contact`(`uuid`) on delete cascade on update cascade, constraint `user_current_client_uuid_foreign` foreign key(`current_client_uuid`) references `client`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `user_username_unique` on `user` (`username`);');
    this.addSql('create unique index `user_contact_uuid_unique` on `user` (`contact_uuid`);');
    this.addSql('create index `user_current_client_uuid_index` on `user` (`current_client_uuid`);');

    this.addSql('create table `document` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `original_filename` text not null, `own_cloud_path` text not null, `creator_uuid` text null, constraint `document_creator_uuid_foreign` foreign key(`creator_uuid`) references `user`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `document_creator_uuid_index` on `document` (`creator_uuid`);');

    this.addSql('create table `account` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `entity_type` text not null default \'individual\', `bank_metadata_uuid` text null, `individual_metadata_uuid` text null, `business_metadata_uuid` text null, `cloud_currency_id` text null, `open_payd_id` text null, `gateway_id` text null, `gateway` text null, `archived_at` datetime null, `fee_uuid` text null, `is_approved` integer null default false, `users_uuid` text null, `credentials` text null, constraint `account_bank_metadata_uuid_foreign` foreign key(`bank_metadata_uuid`) references `bank_metadata`(`uuid`) on delete cascade on update cascade, constraint `account_individual_metadata_uuid_foreign` foreign key(`individual_metadata_uuid`) references `individual_metadata`(`uuid`) on delete cascade on update cascade, constraint `account_business_metadata_uuid_foreign` foreign key(`business_metadata_uuid`) references `business_metadata`(`uuid`) on delete cascade on update cascade, constraint `account_fee_uuid_foreign` foreign key(`fee_uuid`) references `fee`(`uuid`) on delete cascade on update cascade, constraint `account_users_uuid_foreign` foreign key(`users_uuid`) references `user`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `account_bank_metadata_uuid_unique` on `account` (`bank_metadata_uuid`);');
    this.addSql('create unique index `account_individual_metadata_uuid_unique` on `account` (`individual_metadata_uuid`);');
    this.addSql('create unique index `account_business_metadata_uuid_unique` on `account` (`business_metadata_uuid`);');
    this.addSql('create unique index `account_fee_uuid_unique` on `account` (`fee_uuid`);');
    this.addSql('create index `account_users_uuid_index` on `account` (`users_uuid`);');

    this.addSql('create table `shareholder` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `full_name` text null, `dob` datetime null, `occupation` text null, `telephone_number` text null, `business_metadata_uuid` text null, `individual_metadata_uuid` text null, `email` text null, `nationality` text null, `address1` text null, `address2` text null, `previous_address1` text null, `previous_address2` text null, `entity_type` text null, `country` text null, `shares` integer null, `account_uuid` text null, `comply_launch_id` text null, `comply_launch_response` text null, constraint `shareholder_business_metadata_uuid_foreign` foreign key(`business_metadata_uuid`) references `business_metadata`(`uuid`) on delete set null on update cascade, constraint `shareholder_individual_metadata_uuid_foreign` foreign key(`individual_metadata_uuid`) references `individual_metadata`(`uuid`) on delete set null on update cascade, constraint `shareholder_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `shareholder_business_metadata_uuid_unique` on `shareholder` (`business_metadata_uuid`);');
    this.addSql('create unique index `shareholder_individual_metadata_uuid_unique` on `shareholder` (`individual_metadata_uuid`);');
    this.addSql('create index `shareholder_account_uuid_index` on `shareholder` (`account_uuid`);');

    this.addSql('create table `risk_assessment` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `sanction` text null, `rating` text null, `apply` text null, `aml` text null, `sanctioned_jurisdiction` text null, `high_risk_jurisdiction` text null, `third_party` text null, `understood` text null, `material_connection` text null, `sensitive_activity` text null, `volume` text null, `transactions` text null, `knowledge` text null, `pep` text null, `adverse_information` text null, `risk_rating` text null, `completed_by` text null, `completion_date` datetime null, `director` text null, `approval_date` datetime null, `notes` text null, `client_name` text null, `known` text null, `years_known` text null, `met_face` text null, `number_of_beneficial_owners` text null, `applicant_for_business` text null, `classify_as_pep` text null, `automatically_high` text null, `sanctioned_corporate` text null, `high_risk_corporate` text null, `highest_risk` text null, `public_or_wholly` text null, `bearer` text null, `ownership_info` text null, `client_entity_apply` text null, `consider_where` text null, `principal_area_sanction` text null, `principal_area_risk` text null, `principal_area_apply` text null, `business_purpose` text null, `business_purpose_options` text null, `high_risk_activity` text null, `activity_regulated` text null, `value_of_entity` text null, `risk_rating_assessment_completed` text null, `source_of_founds_are_funds_assets_coming_from_a3d2` text null, `source_of_founds_are_funds_assets_coming_from_a3d2details` text null, `complete_any_notes_regarding_risk_assessment` text null, `complete_assessment_complete_by_name` text null, `complete_detail` text null, `complete_notes_rationale_to_justify` text null, `jurisdiction_is_company_ownership_directors` text null, `risk_rating_assessment_notes_re_rationale_to_justify` text null, `ra_attach_document_uuid` text null, `complete_where_applicable_name_of_director` text null, `business_purpose_if_yes_who_it_regulated_by` text null, `next_risk_assessment` datetime null, `residence_nationality_residence_of_beneficial` text null, `account_uuid` text null, constraint `risk_assessment_ra_attach_document_uuid_foreign` foreign key(`ra_attach_document_uuid`) references `document`(`uuid`) on delete set null on update cascade, constraint `risk_assessment_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `risk_assessment_ra_attach_document_uuid_unique` on `risk_assessment` (`ra_attach_document_uuid`);');
    this.addSql('create index `risk_assessment_account_uuid_index` on `risk_assessment` (`account_uuid`);');

    this.addSql('create table `pending_meta_data` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `type` text not null, `field` text not null, `value` text not null, `account_uuid` text null, constraint `pending_meta_data_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `pending_meta_data_account_uuid_index` on `pending_meta_data` (`account_uuid`);');

    this.addSql('create table `invitation` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `email` text not null, `firstname` text not null, `lastname` text not null, `secret` text not null, `user_role` text not null default \'user:member\', `account_uuid` text not null, `creator_uuid` text not null, `expired_at` datetime null, constraint `invitation_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on update cascade, constraint `invitation_creator_uuid_foreign` foreign key(`creator_uuid`) references `user`(`uuid`) on update cascade, primary key (`uuid`));');
    this.addSql('create index `invitation_account_uuid_index` on `invitation` (`account_uuid`);');
    this.addSql('create index `invitation_creator_uuid_index` on `invitation` (`creator_uuid`);');

    this.addSql('create table `fee` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `conversion_amount` text null, `conversion_currency` text null, `sepa_amount` text null, `sepa_currency` text null, `sepa_instant_amount` text null, `sepa_instant_currency` text null, `target2_amount` text null, `target2_currency` text null, `swift_amount` text null, `swift_currency` text null, `chaps_amount` text null, `chaps_currency` text null, `faster_payments_amount` text null, `faster_payments_currency` text null, `account_id` text null, `account_uuid` text null, `updated_by_uuid` text null, constraint `fee_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, constraint `fee_updated_by_uuid_foreign` foreign key(`updated_by_uuid`) references `user`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `fee_account_uuid_index` on `fee` (`account_uuid`);');
    this.addSql('create index `fee_updated_by_uuid_index` on `fee` (`updated_by_uuid`);');

    this.addSql('create table `director` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `full_name` text null, `dob` datetime null, `occupation` text null, `telephone_number` text null, `email` text null, `nationality` text null, `address1` text null, `address2` text null, `previous_address1` text null, `previous_address2` text null, `country` text null, `account_uuid` text null, `comply_launch_id` text null, `comply_launch_response` text null, constraint `director_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `director_account_uuid_index` on `director` (`account_uuid`);');

    this.addSql('create table `contact` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `cloud_currency_id` text null, `open_payd_id` text null, `business_role` text null, `country` text not null, `mobile_number` text null, `is_approved` integer not null default false, `expected_volume_of_transactions` text null, `expected_value_of_turnover` text null, `is_sub_account` integer not null default false, `comply_launch_id` text null, `comply_launch_response` text null, `currency_cloud_password_url` text null, `bank_metadata_uuid` text null, `individual_metadata_uuid` text null, `invitation_uuid` text null, `account_uuid` text null, constraint `contact_bank_metadata_uuid_foreign` foreign key(`bank_metadata_uuid`) references `bank_metadata`(`uuid`) on delete cascade on update cascade, constraint `contact_individual_metadata_uuid_foreign` foreign key(`individual_metadata_uuid`) references `individual_metadata`(`uuid`) on delete cascade on update cascade, constraint `contact_invitation_uuid_foreign` foreign key(`invitation_uuid`) references `invitation`(`uuid`) on delete cascade on update cascade, constraint `contact_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `contact_bank_metadata_uuid_unique` on `contact` (`bank_metadata_uuid`);');
    this.addSql('create unique index `contact_individual_metadata_uuid_unique` on `contact` (`individual_metadata_uuid`);');
    this.addSql('create unique index `contact_invitation_uuid_unique` on `contact` (`invitation_uuid`);');
    this.addSql('create index `contact_account_uuid_index` on `contact` (`account_uuid`);');

    this.addSql('create table `client` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `account_uuid` text null, constraint `client_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `client_account_uuid_unique` on `client` (`account_uuid`);');

    this.addSql('create table `client_document` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `is_approved` integer not null default false, `type` text not null, `document_uuid` text null, `client_uuid` text not null, constraint `client_document_document_uuid_foreign` foreign key(`document_uuid`) references `document`(`uuid`) on delete cascade on update cascade, constraint `client_document_client_uuid_foreign` foreign key(`client_uuid`) references `client`(`uuid`) on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `client_document_document_uuid_unique` on `client_document` (`document_uuid`);');
    this.addSql('create index `client_document_client_uuid_index` on `client_document` (`client_uuid`);');

    this.addSql('create table `broker` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `name` text null, `address` text null, `country` text null, `kyc` text null, `client` text null, `percentage_split` integer null, `payment` text null, `bank_account` text null, `contract` text null, `comment` text null, `comply_launch_id` text null, `comply_launch_response` text null, `account_uuid` text null, constraint `broker_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `broker_account_uuid_index` on `broker` (`account_uuid`);');

    this.addSql('create table `beneficiary` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `firstname` text null, `lastname` text null, `entity_type` text null, `currency` text null, `payment_type` text null, `address` text null, `address_line2` text null, `city` text null, `state` text null, `postcode` text null, `country` text null, `company_name` text null, `bank_name` text null, `branch_name` text null, `bank_address` text null, `bank_country` text null, `account_number` text null, `sort_code` text null, `iban` text null, `bic_swift` text null, `comply_launch_id` text null, `comply_launch_response` text null, `currency_cloud_id` text null, `open_payd_id` text null, `is_approved` integer null default false, `gateway_id` text null, `account_uuid` text null, `creator_uuid` text null, `client_uuid` text null, `impersonator_uuid` text null, constraint `beneficiary_account_uuid_foreign` foreign key(`account_uuid`) references `account`(`uuid`) on delete set null on update cascade, constraint `beneficiary_creator_uuid_foreign` foreign key(`creator_uuid`) references `user`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `beneficiary_account_uuid_index` on `beneficiary` (`account_uuid`);');
    this.addSql('create index `beneficiary_creator_uuid_index` on `beneficiary` (`creator_uuid`);');

    this.addSql('create table `transaction` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `account_id` text not null, `account` text null, `balance_id` text null, `destination_balance_id` text null, `action` text not null, `amount` text not null, `buy_amount` text null, `currency` text not null, `buy_currency` text null, `fixed_side` text null, `transaction_id` text null, `short_id` text not null, `cdax_id` text not null, `gateway` text not null, `gateway_id` text null, `reason` text null, `reference` text null, `status` text not null, `fee_amount` text null, `fee_currency` text null, `gateway_fee_amount` text null, `gateway_fee_currency` text null, `client_rate` text null, `core_rate` text null, `beneficiary` text null, `cdax_beneficiary_id` text null, `beneficiary_id` text null, `payment_date` text null, `payment_type` text null, `payment_reason` text null, `purpose_code` text null, `status_approval` text check (`status_approval` in (\'pending\', \'done\', \'rejected\', \'expired\')) not null, `description` text null, `source` text null, `destination` text null, `sender_name` text null, `sender_address` text null, `sender_information` text null, `sender_account_number` text null, `sender_bic` text null, `sender_iban` text null, `sender_routing_key` text null, `sender_routing_value` text null, `mid_market_rate` text null, `conversion_date` text null, `settlement_date` text null, `gateway_created_at` text null, `gateway_updated_at` text null, `gateway_completed_at` text null, `gateway_spread_table` text null, `partner_rate` text null, `deposit_required` integer null, `deposit_amount` text null, `deposit_currency` text null, `deposit_status` text null, `deposit_required_at` text null, `estimated_arrival` text null, `transferred_at` text null, `creator` text null, `creator_uuid` text null, `client_uuid` text null, `client` text null, `approver_uuid` text null, `impersonator_uuid` text null, `approver` text null, constraint `transaction_account_foreign` foreign key(`account`) references `account`(`uuid`) on delete set null on update cascade, constraint `transaction_beneficiary_foreign` foreign key(`beneficiary`) references `beneficiary`(`uuid`) on delete set null on update cascade, constraint `transaction_creator_foreign` foreign key(`creator`) references `user`(`uuid`) on delete set null on update cascade, constraint `transaction_client_foreign` foreign key(`client`) references `client`(`uuid`) on delete set null on update cascade, constraint `transaction_approver_foreign` foreign key(`approver`) references `user`(`uuid`) on delete set null on update cascade, primary key (`uuid`));');
    this.addSql('create index `transaction_account_index` on `transaction` (`account`);');
    this.addSql('create index `transaction_beneficiary_index` on `transaction` (`beneficiary`);');
    this.addSql('create index `transaction_creator_index` on `transaction` (`creator`);');
    this.addSql('create index `transaction_client_index` on `transaction` (`client`);');
    this.addSql('create index `transaction_approver_index` on `transaction` (`approver`);');

    this.addSql('create table `user_clients` (`uuid` text not null, `user_uuid` text not null, `client_uuid` text not null, constraint `user_clients_user_uuid_foreign` foreign key(`user_uuid`) references `user`(`uuid`) on delete cascade on update cascade, constraint `user_clients_client_uuid_foreign` foreign key(`client_uuid`) references `client`(`uuid`) on delete cascade on update cascade, primary key (`uuid`));');
    this.addSql('create index `user_clients_user_uuid_index` on `user_clients` (`user_uuid`);');
    this.addSql('create index `user_clients_client_uuid_index` on `user_clients` (`client_uuid`);');

    this.addSql('create table `user_clients_metadata` (`uuid` text not null, `user_client_uuid` text not null, `role` text not null default \'user:admin\', `phone_number` text null, `who_they_are` text null, constraint `user_clients_metadata_user_client_uuid_foreign` foreign key(`user_client_uuid`) references `user_clients`(`uuid`) on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `user_clients_metadata_user_client_uuid_unique` on `user_clients_metadata` (`user_client_uuid`);');

    this.addSql('create table `user_document` (`uuid` text not null, `created_at` datetime not null default current_timestamp, `updated_at` datetime not null default current_timestamp, `deleted_at` datetime null, `is_approved` integer not null default false, `status` text null, `type` text not null, `document_uuid` text null, `user_uuid` text not null, constraint `user_document_document_uuid_foreign` foreign key(`document_uuid`) references `document`(`uuid`) on delete set null on update cascade, constraint `user_document_user_uuid_foreign` foreign key(`user_uuid`) references `user`(`uuid`) on update cascade, primary key (`uuid`));');
    this.addSql('create unique index `user_document_document_uuid_unique` on `user_document` (`document_uuid`);');
    this.addSql('create index `user_document_user_uuid_index` on `user_document` (`user_uuid`);');
  }

}
